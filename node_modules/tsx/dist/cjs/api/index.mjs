var u=Object.defineProperty;var i=(t,e)=>u(t,"name",{value:e,configurable:!0});import{r}from"../../pkgroll_create-require-CddX1PP_.mjs";import{r as m}from"../../register-BEybuZJD.mjs";import l from"node:module";import p from"node:path";import{fileURLToPath as f}from"node:url";import{c as h}from"../../module-resolve-filename-B8yyQX2L.mjs";import"module";import"node:fs";import"../../index-CJbZ7IJL.mjs";import"esbuild";import"node:crypto";import"node:os";import"../../temporary-directory-CwHp0_NW.mjs";import"../../source-map-Ctni5cdJ.mjs";import"../../client-CwCkgTEz.mjs";import"node:net";import"../../get-pipe-path-Vzuhiw7V.mjs";import"get-tsconfig";const a=i((t,e)=>{if(!e)throw new Error("The current file path (__filename or import.meta.url) must be provided in the second argument of tsx.require()");return(typeof e=="string"&&e.startsWith("file://")||e instanceof URL)&&(e=f(e)),p.resolve(p.dirname(e),t)},"getRequestContext"),o=i((t,e)=>{const s=a(t,e),n=m();try{return r(s)}finally{n()}},"tsxRequire"),d=h(l._resolveFilename),c=i((t,e,s)=>{const n=a(t,e);return d(n,module,!1,s)},"resolve");c.paths=r.resolve.paths,o.resolve=c,o.main=r.main,o.extensions=r.extensions,o.cache=r.cache;export{m as register,o as require};
