var d=Object.defineProperty;var a=(s,n)=>d(s,"name",{value:n,configurable:!0});import o from"node:module";import{f as x,l as j,c as y}from"./module-resolve-filename-B8yyQX2L.mjs";import S from"node:fs";import{p as M,t as _,a as h}from"./index-CJbZ7IJL.mjs";import{s as m,i as p}from"./source-map-Ctni5cdJ.mjs";import{p as f}from"./client-CwCkgTEz.mjs";const E=a(s=>{if(!s.includes("import")&&!s.includes("export"))return!1;try{return M(s)[3]}catch{return!0}},"isESM"),F=[".cts",".mts",".ts",".tsx",".jsx"],b=[".js",".cjs",".mjs"],i=Object.assign(Object.create(null),o._extensions),v=i[".js"],u=a((s,n)=>{const e=n.split("?")[0];f?.send&&f.send({type:"dependency",path:e});const c=F.some(t=>e.endsWith(t)),l=b.some(t=>e.endsWith(t));if(!c&&!l)return v(s,e);let r=S.readFileSync(e,"utf8");if(e.endsWith(".cjs")){const t=_(n,r);t&&(r=m()?p(t):t.code)}else if(c||E(r)){const t=h(r,n,{tsconfigRaw:x?.(e)});r=m()?p(t):t.code}s._compile(r,e)},"transformer");[".js",".ts",".tsx",".jsx"].forEach(s=>{i[s]=u}),Object.defineProperty(i,".mjs",{value:u,enumerable:!1});const g=a(()=>{const{sourceMapsEnabled:s}=process,{_extensions:n,_resolveFilename:e}=o;j(process.env.TSX_TSCONFIG_PATH),process.setSourceMapsEnabled(!0);const c=y(e);return o._resolveFilename=c,o._extensions=i,a(()=>{s===!1&&process.setSourceMapsEnabled(!1),o._extensions=n,o._resolveFilename=e},"unregister")},"register");export{g as r};
